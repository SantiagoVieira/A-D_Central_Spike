{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SantiagoVieira/A-D_Central_Spike/blob/main/Correccion%20Taller%202%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U2CMC8bcda9A"
      },
      "source": [
        "## Central Spike\n",
        "Bienvenidos al centro de codificación central spike, aqui trabajo el equipo de desarrollo para llevar a cabo una solucion que nos permitiera realizar diferentes calculos como lo son:\n",
        "1. Permutaciones\n",
        "2. Variaciones\n",
        "3. Combinaciones\n",
        "4. Principio multiplicativo\n",
        "\n",
        "En este notebook estara el analisis del programa con Big O.\n",
        "\n",
        "No siendo más esperamos que te sirva este programa.\n",
        "\n",
        "\n",
        "La documentacion del Codigo estara en le siguiente link:\n",
        "https://drive.google.com/file/d/1knZBANcYm8dm-hGc-S5pA4L6TuwakE-T/view?usp=sharing\n",
        "\n",
        "Si deseas ver que realiza cada parte del codigo te invito a que entres al siguiente link: https://colab.research.google.com/drive/1SlRhBRvdS21zhI4ozO3O-uzQ0yRZ-XZt?usp=sharing\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "L0LoHh2HY3-4"
      },
      "outputs": [],
      "source": [
        "class Operaciones:\n",
        "    @staticmethod\n",
        "    def factorial(num):                  #Complejidad: O(n)\n",
        "      if num == 0 or num == 1:           # O(1)\n",
        "          return 1                       # O(1)\n",
        "      else:\n",
        "          resultado = 1                  # O(1)\n",
        "          for i in range(2, num + 1):    # O(n)\n",
        "              resultado *= i             # O(1)\n",
        "          return resultado"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "9iySjHcpijbn"
      },
      "outputs": [],
      "source": [
        "class CalculadoraCombinatoria:\n",
        "    def __init__(self,n,r):                  # O(1)\n",
        "        self.n = n                          # O(1)\n",
        "        self.r = r                          # O(1)\n",
        "\n",
        "    def principio_multiplicativo(self):         #Complejidad: O(1)\n",
        "    # Multiplicacion de dos variables\n",
        "      return self.n * self.r                    # O(1)\n",
        "\n",
        "    def permutaciones(self,pregunta):                    #Complejidad: O(n)\n",
        "\n",
        "      if pregunta.lower() == \"si\":           # O(1)\n",
        "        denominador = self.permutacion_repeticion()   # O(n)\n",
        "      # Llamadas al método factorial de la clase Operaciones\n",
        "        return Operaciones.factorial(self.n) / denominador    # O(n)\n",
        "      elif pregunta.lower() == \"no\":            # O(1)\n",
        "      # Llamado al método factorial de la clase Operaciones\n",
        "        return Operaciones.factorial(self.n)     # O(n)\n",
        "\n",
        "\n",
        "    def combinaciones(self,pregunta):                      #Complejidad: O(n)\n",
        "\n",
        "      if pregunta.lower() == \"si\":                 # O(1)\n",
        "      # Llamadas al método factorial de la clase Operaciones\n",
        "        return Operaciones.factorial(self.n+self.r-1) // (Operaciones.factorial(self.r) * Operaciones.factorial(self.n-1))    # O(n) -> llamados de la funcion factorial\n",
        "      elif pregunta.lower() == \"no\":     # O(1)\n",
        "      # Llamadas al método factorial de la clase Operaciones\n",
        "        return Operaciones.factorial(self.n) // (Operaciones.factorial(self.r) * Operaciones.factorial(self.n-self.r))  # O(n) -> llamados de la funcion factorial\n",
        "\n",
        "\n",
        "\n",
        "    def variaciones(self,pregunta):   #Complejidad: O(n)\n",
        "\n",
        "      if pregunta.lower() == \"si\":             # O(1)\n",
        "          return self.n**self.r                # O(1)\n",
        "      elif pregunta.lower() == \"no\":           # O(1)\n",
        "      # Llamadas al método factorial de la clase Operaciones\n",
        "        return Operaciones.factorial(self.n) // Operaciones.factorial(self.n-self.r) # O(n)\n",
        "\n",
        "\n",
        "    def permutacion_repeticion(self):                 # Complejidad : O(n)\n",
        "      while True:                                                                # O(n)\n",
        "          try:\n",
        "            # preguntar cuantos datos repetidos hay\n",
        "              num_elementos = int(input(\"Ingrese el número total de elementos repetidos: \"))      # O(n)\n",
        "              if num_elementos >= 0:\n",
        "                break\n",
        "              else:\n",
        "               print(\"No Es valido Numeros Negativos, Intentalo De Nuevo.\")\n",
        "          except ValueError:\n",
        "              print(\"Entrada inválida, por favor ingresa un número válido\")                        # O(1)\n",
        "\n",
        "      # Solicitar al usuario los datos de cada elemento y su número de repeticiones\n",
        "      denominador = 1                                                                             # O(1)\n",
        "      cantidad = 0                                                                                # O(1)\n",
        "      while cantidad < num_elementos:                                                             # O(n)\n",
        "          try:\n",
        "              repeticion = int(input(\"Ingrese el número de repeticiones para el elemento {}: \".format(cantidad + 1)))  # O(n)\n",
        "              if repeticion >= 0 and repeticion < self.n:                   # O(1)\n",
        "                  denominador *= Operaciones.factorial(repeticion)         # O(1)\n",
        "                  cantidad += 1                                            # O(1)\n",
        "              else:\n",
        "                  print(\"No Es valido Numeros Negativos o Elementos Repetido Mayores Que N, Intentalo De Nuevo.\")    # O(1)\n",
        "          except ValueError:\n",
        "              print(\"Entrada inválida, por favor ingresa un número válido\")                  # O(1)\n",
        "\n",
        "      return denominador                   # O(1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7gpfE3Hh3HI2",
        "outputId": "d14ae05d-e6ae-4b1c-e224-e7f94ae07b19"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "   ____                  _                    _\n",
            "  / ___|   ___   _ __   | |_   _ __    __ _  | |\n",
            " | |      / _ \\ | '_ \\  | __| | '__|  / _` | | |\n",
            " | |___  |  __/ | | | | | |_  | |    | (_| | | |\n",
            "  \\____|  \\___| |_| |_|  \\__| |_|     \\__,_| |_|\n",
            " / ___|   _ __   (_) | | __   ___\n",
            " \\___ \\  | '_ \\  | | | |/ /  / _   ___) | | |_) | | | |   <  |  __/\n",
            " |____/  | .__/  |_| |_|\\_\\  \\___|\n",
            "         |_|\n",
            "\n",
            "Bienvenido al programa para calcular Principios de conteo.\n",
            "\n",
            "        Los principios de conteo implican técnicas dentro del ámbito de la combinatoria,\n",
            "        que se emplean para determinar la cantidad de resultados posibles en una situación o experimento determinado.\n",
            "        El principio esencial del conteo establece que si una acción puede realizarse de 'n' formas distintas y otra\n",
            "        acción de 'r' formas, entonces hay 'n * r'formas diferentes de realizar las 2 acciones en conjunto.\n",
            "        En el estudio del conteo,existen 2 enfoques principales: las permutaciones y las combinaciones.\n",
            "        Las permutaciones tienen en cuenta el orden en el que se seleccionan los elementos, mientras que las combinaciones no consideran dicho orden.\n",
            "        \n",
            "\n",
            "Cuentanos que operacion deseas Realizar:\n",
            "\n",
            "1. Permutaciones\n",
            "2. Combinaciones\n",
            "3. Variaciones\n",
            "4. Principio Multiplicativo\n",
            "\n",
            "Elige una opción: 1\n",
            "Se repite (si/no): si\n",
            "Ingresa el valor de n: 10\n",
            "Ingrese el número total de elementos repetidos: 2\n",
            "Ingrese el número de repeticiones para el elemento 1: 6\n",
            "Ingrese el número de repeticiones para el elemento 2: 4\n",
            "Permutaciones:  210.0\n"
          ]
        }
      ],
      "source": [
        "class InterfazUsuario:\n",
        "    def __init__(self):                     # O(1)\n",
        "        self.calculadora = None             # O(1)\n",
        "\n",
        "    def solicitar_datos(self):              # O(1)\n",
        "        print(\"\"\"\n",
        "   ____                  _                    _\n",
        "  / ___|   ___   _ __   | |_   _ __    __ _  | |\n",
        " | |      / _ \\ | '_ \\  | __| | '__|  / _` | | |\n",
        " | |___  |  __/ | | | | | |_  | |    | (_| | | |\n",
        "  \\____|  \\___| |_| |_|  \\__| |_|     \\__,_| |_|\n",
        " / ___|   _ __   (_) | | __   ___\n",
        " \\___ \\  | '_ \\  | | | |/ /  / _ \\\n",
        "  ___) | | |_) | | | |   <  |  __/\n",
        " |____/  | .__/  |_| |_|\\_\\  \\___|\n",
        "         |_|\n",
        "\"\"\")\n",
        "        print(\"Bienvenido al programa para calcular Principios de conteo.\")\n",
        "        print(\"\"\"\n",
        "        Los principios de conteo implican técnicas dentro del ámbito de la combinatoria,\n",
        "        que se emplean para determinar la cantidad de resultados posibles en una situación o experimento determinado.\n",
        "        El principio esencial del conteo establece que si una acción puede realizarse de 'n' formas distintas y otra\n",
        "        acción de 'r' formas, entonces hay 'n * r'formas diferentes de realizar las 2 acciones en conjunto.\n",
        "        En el estudio del conteo,existen 2 enfoques principales: las permutaciones y las combinaciones.\n",
        "        Las permutaciones tienen en cuenta el orden en el que se seleccionan los elementos, mientras que las combinaciones no consideran dicho orden.\n",
        "        \"\"\")\n",
        "        print(\"\")\n",
        "        print(\"Cuentanos que operacion deseas Realizar:\")\n",
        "        print(\"\")\n",
        "        print(\"1. Permutaciones\")\n",
        "        print(\"2. Combinaciones\")\n",
        "        print(\"3. Variaciones\")\n",
        "        print(\"4. Principio Multiplicativo\")\n",
        "\n",
        "        print(\"\")\n",
        "        while True:\n",
        "\n",
        "            try:\n",
        "                opcion = int(input(\"Elige una opción: \"))   # O(1)\n",
        "                if opcion in [1, 2, 3, 4]:                  # O(1)\n",
        "                  if opcion == 4:                                                    # O(1)\n",
        "                      pregunta = \"nada\"\n",
        "                      numero_1 = int(input(\"Ingresa el valor de numero 1: \"))               # O(1)\n",
        "                      numero_2 = int(input(\"Ingresa el valor de numero 2: \"))\n",
        "                      if numero_1>= 0 and numero_2>=0:\n",
        "                        self.calculadora = CalculadoraCombinatoria(numero_1, numero_2)         # O(1)\n",
        "                        break\n",
        "                      else:\n",
        "                        print(\"No Es valido Numeros Negativos, Intentalo De Nuevo.\") # O(1)\n",
        "\n",
        "\n",
        "                  if opcion !=4:\n",
        "                    pregunta = input(\"Se repite (si/no): \")     # O(1)\n",
        "                    if pregunta.lower() == \"si\" or pregunta.lower() == \"no\":       # O(1)\n",
        "                      if opcion == 1:                                              # O(1)\n",
        "                        n = int(input(\"Ingresa el valor de n: \"))                  # O(1)\n",
        "                        if n >= 0:                                                 # O(1)\n",
        "                          self.calculadora = CalculadoraCombinatoria(n, 1)         # O(1)\n",
        "                          break\n",
        "                        else:\n",
        "                          print(\"No Es valido Numeros Negativos, Intentalo De Nuevo.\") # O(1)\n",
        "\n",
        "                      else:\n",
        "                        n = int(input(\"Ingresa el valor de n: \"))               # O(1)\n",
        "                        r = int(input(\"Ingresa el valor de r: \"))               # O(1)\n",
        "                        if n >= 0 and r >=0:                                         # O(1)\n",
        "                          if n > r:                                                  # O(1)\n",
        "                            self.calculadora = CalculadoraCombinatoria(n, r)        # O(1)\n",
        "                            break                                                   # O(1)\n",
        "                          else:\n",
        "                            print(\"R no puede ser mayor que N\")                     # O(1)\n",
        "                        else:\n",
        "                          print(\"No Es valido Numeros Negativos, Intentalo De Nuevo.\")    # O(1)\n",
        "                    else:\n",
        "                      print(\"Respuesta Invalida, Intentalo De Nuevo\")                 # O(1)\n",
        "                else:\n",
        "                    print(\"Opción no válida, por favor elige una opción válida.\")  # O(1)\n",
        "            except ValueError:\n",
        "                print(\"Entrada inválida, por favor ingresa un número válido.\")     # O(1)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "        return opcion,pregunta                                          # O(1)\n",
        "\n",
        "    def mostrar_resultado(self, opcion,pregunta):           # O(1)\n",
        "        if opcion == 1:                            # O(1)\n",
        "            print(\"Permutaciones: \", self.calculadora.permutaciones(pregunta))     # O(n)\n",
        "        elif opcion == 2:                                                  # O(1)\n",
        "            print(\"Combinaciones: \", self.calculadora.combinaciones(pregunta))     # O(n)\n",
        "        elif opcion == 3:                                                  # O(1)\n",
        "            print(\"Variaciones: \", self.calculadora.variaciones(pregunta))         # O(n)\n",
        "        elif opcion == 4:                                                  # O(1)\n",
        "           print(\"Principio multiplicativo\", self.calculadora.principio_multiplicativo())   # O(1)\n",
        "\n",
        "        else:\n",
        "\n",
        "          print(\"Opción no válida\")    # O(1)\n",
        "\n",
        "def main():     # O(1)\n",
        "    interfaz = InterfazUsuario()   # O(1)\n",
        "    opcion,pregunta = interfaz.solicitar_datos()   # O(1)\n",
        "    interfaz.mostrar_resultado(opcion,pregunta)    # O(1)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        " main()    # O(1)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-11yRjSgoybj"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}